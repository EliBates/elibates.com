@font-face {
	font-family: 'sofia-pro';
	src: url('/Sofia Pro Regular Az.otf') format('opentype');
}

$breakpoints: (
	'small': (
		min-width: 767px
	),
	'medium': (
		min-width: 992px
	),
	'large': (
		min-width: 1200px
	),
	'x-large': (
		min-width: 1600px
	)
) !default;

/// Mixin to manage responsive breakpoints
/// @author Hugo Giraudel
/// @param {String} $breakpoint - Breakpoint name
/// @require $breakpoints
@mixin respond-to($breakpoint) {
	// If the key exists in the map
	@if map-has-key($breakpoints, $breakpoint) {
		// Prints a media query based on the value
		@media #{inspect(map-get($breakpoints, $breakpoint))} {
			@content;
		}
	}

	// If the key doesn't exist in the map
	@else {
		@warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "
			+ "Available breakpoints are: #{map-keys($breakpoints)}.";
	}
}

* {
	margin: 0;
	padding: 0;
	box-sizing: border-box;
	font-family: 'sofia-pro', 'roboto', sans-serif;
}

p,
h4 {
	font-family: 'roboto', sans-serif;
}

.container {
	margin: 0 auto;

	max-width: 100%;
	height: auto;
	padding: 0 0.5rem 0 0.5rem;

	@include respond-to('small') {
		max-width: 95%;
		padding: 0;
	}
	@include respond-to('medium') {
		max-width: 85%;
	}
	@include respond-to('large') {
		max-width: 75%;
	}
	@include respond-to('x-large') {
		max-width: 65%;
	}
}

.page {
	box-shadow: 0 1px 1px hsla(0, 0%, 0%, 0.1);
	background-color: white;
	border-radius: 0.8rem;
	padding: 1rem;
	margin-top: 2rem;
	overflow: hidden;
	position: relative;
	transition: all 400ms ease;
}

.page:hover {
	background-color: rgba(255, 255, 255, 0.742);
}

.flex {
	display: flex;
}

.flex-xlg-row {
	flex-direction: column;

	@include respond-to('large') {
		flex-direction: row;
	}
}

.content-text {
	margin-bottom: 1rem;
	@include respond-to('small') {
		margin-right: 2rem;
	}
}

.content-image {
	box-shadow: 0 1px 1px hsla(0, 0%, 0%, 0.4);
	border-radius: 1rem;
	display: block;
	width: 100%;
	height: 20rem;
	object-fit: cover;
	margin-left: auto;
	margin-right: auto;
	@include respond-to('small') {
		object-position: center;
	}
	@include respond-to('large') {
		width: 20rem;
		height: auto;
	}
	@include respond-to('x-large') {
		width: 30rem;
	}
}

.section-image {
	display: block;
	height: 2.5rem;
	@include respond-to('small') {
		height: 2rem;
	}
	@include respond-to('large') {
		height: 3rem;
	}
}
.section-heading {
	width: 100%;
	display: flex;
	flex-direction: column;
	align-items: center;
	justify-content: space-between;
	padding-bottom: 0.7rem;
	margin-bottom: 0.7rem;
	border-bottom: 1px solid rgb(198, 198, 198);
	@include respond-to('small') {
		flex-direction: row-reverse;
	}
}
.muted {
	text-align: center;
	color: hsl(0, 0%, 60%);
}

.spacer {
	height: 10rem;
}

.section-title {
	margin-top: 1rem;
	@include respond-to('small') {
		margin-top: 0;
	}
}
.section-title > p {
	margin-top: 0;
	font-size: 1rem;
	color: hsl(0, 0%, 45%);
	font-style: italic;
	text-align: center;

	@include respond-to('small') {
		text-align: left;
	}
}

.section-title > h2 {
	color: hsl(0, 0%, 25%);
}

.section-content p {
	margin-bottom: 1rem;
}

.section-content q {
	font-size: 1rem;
	line-height: 1.4rem;
}

.section-content q {
	quotes: '“  ' ' ”';
	margin-top: 2rem;
}
